/**
 * @param {string} s
 * @return {number}
 */

var longestValidParentheses = function (s) {
    let map = {}
    let max = 0

    const set = (i, j, val) => {
        map[i] = map[i] || {}
        map[i][j] = val ? j - i + 1 : 0
        max = Math.max(max, map[i][j])
    }
    const get = (i, j) => {
        map[i] = map[i] || {}
        if (map[i][j] === undefined) f(i, j)
        return map[i][j]
    }
    const f = (start, end) => {
        if (start >= s.length || end < 0 || end < start) return
        if ((end - start + 1) % 2) return set(start, end, false)
        if (s[start] === ')' || s[end] === '(') return set(start, end, false)
        if (end === start + 1) {
            if (s[start] === '(' && s[end] === ')')
                return set(start, end, true)
            else
                return set(start, end, false)
        }
        for (let k = start + 1; k < end - 1; k += 2) {
            if (get(start, k) && get(k + 1, end)) {
                return set(start, end, true)
            }
        }
        if (s[start] === '(' && s[end] === ')' && get(start + 1, end - 1)) {
            return set(start, end, true)
        }
        return set(start, end, false)
    }
    for (let i = 0; i < s.length - 1; i++)
        for (let j = i + max - 1; j < s.length; j++)
            f(i, j)
    return max
}

const input
console.log(longestValidParentheses(input))

// ")(((((()())()()))()(()))("